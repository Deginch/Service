package Database;

import Service.*;
import Tool.ErrorLog;
import com.sun.rowset.CachedRowSetImpl;

import javax.sql.RowSet;
import javax.sql.rowset.CachedRowSet;
import java.lang.reflect.Field;
import java.sql.*;
import java.util.*;

/**
 * Created by degin on 2016/6/30.
 * 数据库通用操作类
 */
public class DBHelper {

    Connection conn;
    private Object object = new Object();

    public DBHelper() throws SQLException {
        openConn();
    }

    public DBHelper(Connection conn) {
        this.conn = conn;
    }

    public void openConn() throws SQLException {
        JdbcPool jdbcPool = new JdbcPool();
        conn = jdbcPool.getConnection();
    }

    public List<Object> getList(String sql, Object[] parms) {
        synchronized (object) {
            List<Object> list = new ArrayList<>();
            PreparedStatement statement = null;
            ResultSet rs = null;
            try {
                statement = conn.prepareStatement(sql);
                for (int i = 0; i < parms.length; i++) {
                    statement.setObject(i + 1, parms[i]);
                }
                rs = statement.executeQuery();
                while (rs.next()) {
                    list.add(rs.getObject(1));
                }

            } catch (SQLException e) {
                e.printStackTrace();
                System.out.println(sql);
                for (int i = 0; i < parms.length; i++) {
                    System.out.print(parms[i] + "\t");
                }
                System.out.print("\n");
                try {
                    Thread.sleep(3000);
                    openConn();
                } catch (InterruptedException e1) {
                    e1.printStackTrace();
                } catch (SQLException e1) {
                    e1.printStackTrace();
                }
            } finally {
                release(statement, rs);
            }
            return list;
        }
    }

    public Object getOneData(String sql) {
        synchronized (object) {
            Statement statement = null;
            ResultSet rs = null;
            Object value = null;
            try {
                statement = conn.createStatement();
                rs = statement.executeQuery(sql);
                while (rs.next()) {
                    value = rs.getObject(1);
                }
            } catch (SQLException e) {
                ErrorLog.writeLog(e);
                try {
                    Thread.sleep(3000);
                    openConn();
                } catch (InterruptedException e1) {
                    ErrorLog.writeLog(e);
                } catch (SQLException e1) {
                    ErrorLog.writeLog(e);
                }
            } catch (Exception e){
                ErrorLog.writeLog(e);
            }finally {
                release(statement, rs);
            }
            return value;
        }
    }

    public Object getOneData(String sql, Object[] parms) {
        synchronized (object) {
            PreparedStatement statement = null;
            ResultSet rs = null;
            Object value = new Object();
            try {
                statement = conn.prepareStatement(sql);
                for (int i = 0; i < parms.length; i++) {
                    statement.setObject(i + 1, parms[i]);
                }
                rs = statement.executeQuery();
                while (rs.next()) {
                    value = rs.getObject(1);
                }
            } catch (SQLException e) {
                ErrorLog.writeLog(e);
                System.out.println(sql);
                for (int i = 0; i < parms.length; i++) {
                    System.out.print(parms[i] + "\t");
                }
                System.out.print("\n");
                try {
                    Thread.sleep(3000);
                    openConn();
                } catch (InterruptedException e1) {
                    ErrorLog.writeLog(e1);
                } catch (SQLException e1) {
                    ErrorLog.writeLog(e1);
                }
            } catch (Exception e){
                ErrorLog.writeLog(e);
            }finally {
                release(statement, rs);
            }
            return value;
        }
    }

    public int execute(String sql, Object[] parms) {
        synchronized (object) {
            PreparedStatement statement = null;
            int changedCount = 0;
            Object value = null;
            try {
                statement = conn.prepareStatement(sql);
                for (int i = 0; i < parms.length; i++) {
                    statement.setObject(i + 1, parms[i]);
                }
                changedCount = statement.executeUpdate();
            } catch (SQLException e) {
                ErrorLog.writeLog(e);
                System.out.println(sql);
                for (int i = 0; i < parms.length; i++) {
                    System.out.print(parms[i] + "\t");
                }
                System.out.print("\n");
                try {
                    Thread.sleep(3000);
                    openConn();
                } catch (InterruptedException e1) {
                    e1.printStackTrace();
                } catch (SQLException e1) {
                    e1.printStackTrace();
                }
            } finally {
                release(statement);
            }
            return changedCount;
        }
    }

    /**
     * 返回离线数据集，但是性能会有很大的消耗
     *
     * @param sql
     * @param params
     * @return
     */
    public RowSet getRowSet(String sql, Object[] params) {
        CachedRowSet rs = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        try {
            rs = new CachedRowSetImpl();
            statement = conn.prepareStatement(sql);
            for (int i = 0; i < params.length; i++) {
                statement.setObject(i + 1, params[i]);
            }
            resultSet = statement.executeQuery();
            rs.populate(resultSet);
        } catch (SQLException e) {
            ErrorLog.writeLog(e);
        } finally {
            release(statement, resultSet);
        }
        return rs;
    }

    /**
     * 根据sql查询数据库，并动态生成clazz类的hashtable并返回，hashtable的key是service的id
     *
     * @param serviceFactory
     * @param sql
     * @param params
     * @return
     * @throws Exception
     */
    public Object getInstanceHashTable(ServiceFactory serviceFactory, String sql, Object[] params) {
        synchronized (object) {
            Hashtable<Integer, Object> hashtable = new Hashtable();
            PreparedStatement statement = null;
            ResultSet rs = null;
            try {
                statement = conn.prepareStatement(sql);
                for (int i = 0; i < params.length; i++) {
                    statement.setObject(i + 1, params[i]);
                }
                rs = statement.executeQuery();
                while (rs.next()) {
                    Service bean = null;
                    try {
                        bean = serviceFactory.getService(rs.getInt("service_type"));
                    } catch (SQLException e) {
                        bean = serviceFactory.getDefaultService();
                    }
                    ResultSetMetaData metaData = rs.getMetaData();
                    int count = metaData.getColumnCount();
                    int id = -1;
                    for (int i = 0; i < count; i++) {
                        String name = metaData.getColumnName(i + 1);
                        Object value = rs.getObject(name);
                        if (name.equals("id")) {
                            id = (int) value;
                        }
                        try {
                            Field f = bean.getClass().getField(name);
                            f.setAccessible(true);
                            f.set(bean, value);
                        } catch (NoSuchFieldException e) {
                            ErrorLog.writeLog(e);
                        } catch (IllegalAccessException e) {
                            e.printStackTrace();
                        }
                    }
                    if (id == -1) {
                        ErrorLog.writeLog("there is a big bug, there is not id field in database");
                        return null;
                    }
                    hashtable.put(id, bean);
                }
            } catch (SQLException e) {
                ErrorLog.writeLog(e);
            } finally {
                release(statement, rs);
            }
            return hashtable;
        }

    }

    /**
     * 从数据库查处数据并转化成对象链表
     *
     * @param clazz
     * @param sql
     * @param params
     * @return
     */
    public List<?> selectObjectList(Class<?> clazz, String sql, Object[] params) {
        synchronized (object) {
            List<?> list = new LinkedList<>();
            PreparedStatement statement = null;
            ResultSet rs = null;
            try {
                statement = conn.prepareStatement(sql);
                for (int i = 0; i < params.length; i++) {
                    statement.setObject(i + 1, params[i]);
                }
                rs = statement.executeQuery();
                list = result2Object(clazz, rs);
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                release(statement, rs);
            }
            return list;
        }
    }

    /**
     * 根据指定sql语句查询出对象hashtable，key为对象的indexField。
     * @param clazz
     * @param sql
     * @param params
     * @return
     */
    public Hashtable<?, SqlObject> selectObjectHashtable(Class<SqlObject> clazz, String sql, Object[] params) {
        synchronized (object) {
            Hashtable<Object,SqlObject> hashtable=new Hashtable<>();
            PreparedStatement statement = null;
            ResultSet rs = null;
            try {
                statement = conn.prepareStatement(sql);
                for (int i = 0; i < params.length; i++) {
                    statement.setObject(i + 1, params[i]);
                }
                rs = statement.executeQuery();
                while (rs.next()){
                    SqlObject bean=clazz.newInstance();
                    fillObject(rs,bean);
                    Object index=rs.getObject(bean.getIndexField().getName());
                    hashtable.put(index,bean);
                }
            } catch (SQLException e) {
                e.printStackTrace();
            } catch (InstantiationException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            } catch (NoSuchFieldException e) {
                e.printStackTrace();
            } finally {
                release(statement, rs);
            }
            return hashtable;
        }
    }

    /**
     * 从数据库查处数据并转化成对象链表
     *
     * @param clazz
     * @param sql
     * @return
     */
    public List<?> selectObjectList(Class<?> clazz, String sql) {
        synchronized (object) {
            List<?> list = new LinkedList<>();
            PreparedStatement statement = null;
            ResultSet rs = null;
            try {
                statement = conn.prepareStatement(sql);
                rs = statement.executeQuery();
                list = result2Object(clazz, rs);
            } catch (SQLException e) {
                e.printStackTrace();
            } finally {
                release(statement, rs);
            }
            return list;
        }
    }

    /**
     * 从数据库获取最新值
     * @param bean
     */
    public void select(SqlObject bean){
        PreparedStatement statement=null;
        ResultSet rs=null;
        try {
            Field field=bean.getIndexField();
            field.setAccessible(true);
            String sql="select * from "+bean.getTableName()+" where "+field.getName()+"=?";
            statement=conn.prepareStatement(sql);
            statement.setObject(1,field.get(bean));
            rs=statement.executeQuery();
            while (rs.next()){
                fillObject(rs,bean);
            }
        } catch (NoSuchFieldException e) {
            ErrorLog.writeLog(e);
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } finally {
            release(statement,rs);
        }
    }

    /**
     * 将查询出来的结果转化成对象
     *
     * @param clazz
     * @param rs
     * @return
     */
    private List<?> result2Object(Class<?> clazz, ResultSet rs) {
        synchronized (object) {
            LinkedList<Object> list = new LinkedList<>();
            try {
                while (rs.next()) {
                    Object bean = clazz.newInstance();
                    fillObject(rs,bean);
                    list.add(bean);
                }
            } catch (SQLException e) {
                ErrorLog.writeLog(e);
            } catch (InstantiationException e) {
                ErrorLog.writeLog(e);
            } catch (IllegalAccessException e) {
                ErrorLog.writeLog(e);
            }
            return list;
        }
    }

    /**
     * 将当前行数据填充到对象
     * @param rs
     * @param bean
     */
    private void fillObject(ResultSet rs,Object bean) {
        try {
            ResultSetMetaData metaData = rs.getMetaData();
            int count = metaData.getColumnCount();
            for (int i = 0; i < count; i++) {
                String name = metaData.getColumnName(i + 1);
                Object value = rs.getObject(name);
                try {
                    Field f = bean.getClass().getField(name);
                    f.setAccessible(true);
                    f.set(bean, value);
                } catch (NoSuchFieldException e) {
                } catch (SecurityException e) {
                    ErrorLog.writeLog(e);
                }
            }
        } catch (SQLException e) {
            ErrorLog.writeLog(e);
        }  catch (IllegalAccessException e) {
            ErrorLog.writeLog(e);
        }
    }

    /**
     * 关闭链接
     */
    public void close() {
        try {
            if (conn != null)
                conn.close();
        } catch (SQLException e) {
            ErrorLog.writeLog(e);
        }
    }

    /**
     * @Date 2016/7/1
     * 释放资源
     */
    public static void release(Statement statement, ResultSet rs) {
        release(rs);
        release(statement);
    }

    /**
     * @Date 2016/7/1
     * 释放资源
     */
    public static void release(Statement statement) {
        if (statement != null) {
            try {
                statement.close();
                statement = null;
            } catch (SQLException e) {
                ErrorLog.writeLog(e);
            }
        }
    }

    /**
     * @Date 2016/7/1
     * 释放资源
     */
    public static void release(ResultSet rs) {
        if (rs != null) {
            try {
                rs.close();
                rs = null;
            } catch (SQLException e) {
                ErrorLog.writeLog(e);
            }
        }
    }
}
